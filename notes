INDEX.JS CODE UNDERSTANDING 
index.js contains our main code, it's work is to take our react app (Tic tac toe) and show it inside a particular part of the web page 
import { StrictMode } from "react"; - here strictmode is a tool which removes any bugs and unsafe practices in the project. It's basically importing strictmode from react. 
import { createRoot } from "react-dom/client"; - createroot creates a place in html where we can display our react project (tic tac toe) and react-dom is a react library 
which allows react to connect with the actual webpage.So createroot function is comes from the react dom library to help display the tictactoe on the webpage.
import "./styles.css"; - CCS (cascading style sheets) it's work is to describe how our html webpage will look. This command helps us with the font, colour, size, etc of the webpage.
import App from "./App";- There's another file app.js which contains the code of the app so this command brings in that "app" main component where our app starts from app.js. 
const root = createRoot(document.getElementById("Ikshita")); - (document.getElementById("Ikshita")) this part search ups the html file of the app and finds out the ID named Ikshita
the command in the html file look like <div id="Ikshita"></div> also here div means an empty box in our web page, createroot it's a react function from react dom library it creates
a root which means a workspace in the page and make progress of the app there.
root.render- root-is the contoller of ID Ikshita, render- it's work is to put our app into the Ikshita div. Basically root.render command is used to take the react app components 
and display on the Ikshita div that we created earlier.


APP.JS MAIN CODE UNDERSTANDING
import { useState } from 'react'; - usestate is again a function from react it helps us to remember moves and whose turn it is in a game like tic tac toe. 
function Square({ value, onSquareClick }) { - this command creates a component sqaure, this accepts informationpassed to it, onsquareclick is a functions that runs when it's clicked 
and then what function to call and function like switch player ( X or O in the tic tac toe game ). 
return (
  <button className="square" onClick={onSquareClick}>
    {value}
  </button>
); 
under the tag classname="sqaure" we can style it with css change font, size, colour etc. onClick={onSquareClick} it basically call the function when clicked like on clicking 
a square we might get an X or O in a game of tic tac toe. {value} - what value is stored again like X or O. Also here button is like a clickable button which will work and through
value when clicked, the square has these buttons. 
function Board({ xIsNext, squares, onPlay }) {
  function handleClick(i) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = 'X';
    } else {
      nextSquares[i] = 'O';
    }
    onPlay(nextSquares);
  }
Board component- This component manage the game logic for tic tac toe game, board component contains xIsNext, squares and onPlay. xIsNext figures out if the next move is X's
turn or O's turn when a sqaure (button) is clicked. Sqaure is an array with 9 elements (sqaures) and it determines the current state of one box if it's X,O or Null. 
onPlay updates the game state when a sqaure is clicked. 
(calculateWinner(squares) it checks if there's a winner or not, squares[i]) it checks whether the square which has been clicked is occupied or not and if either of it is true
it return the value to invalid move. Now through slice we copy our 9 sqaure array so that we can make changes in that because react doesn't allow you to directly change in the
original state and by change we mean for ex- we clicked the top left sqaure and it's current state was null and if it was X's chance so when clicked it's current state changes
from null to X these changes take place in the sqaure array we copy through slice. The whole next part determines if it's X's turn or O's turn. Is xIsNext true it prints x on
the sqaure which is clicked else it'll print O and then onplay updates the state of the game. 
const winner = calculateWinner(squares);
  let status;
  if (winner) {
    status = 'Winner: ' + winner;
  } else {
    status = 'Next player: ' + (xIsNext ? 'X' : 'O');
  }
const winner = calculateWinner(squares) this returns if there's a winner(X or O) yet or not (Null), how this works? first it checks the status if there's a winner if there is 
then show a message winner(X or O) else show a message Next Player(X or O) and xIsNext is used to figure if it's X's turn or O's turn if the game is not finished. 
return (
    <>
      <div className="status">{status}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}
this creates 9 box 3 in each row through board-row and each sqaure has it's own sqaure array and handlclick, for eg squares[0] and handleClick(0). 
export default function Game() {
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const [currentMove, setCurrentMove] = useState(0);
  const xIsNext = currentMove % 2 === 0;
  const currentSquares = history[currentMove];
useState is a react hook which helps the components to remember things, history remember all the moves of our game (memory), setHistory let's us change the memory, Now basically
we create a memory box using history then set up 9 arrays fill with null and then we can those arrays state from null to X or O through setHistory. 
const [currentMove, setCurrentMove] = useState(0); This shows which move the player is currently viewing and it sarts from 0(inital state). 
const xIsNext = currentMove % 2 === 0; = determines if it's X's or O's turn using 2nd's multiplication table even moves(0,2,4,6,8) for X and Odd moves(1,3,5,7) for O
const currentSquares = history[currentMove]; = this command means to get the current board state(currentSqaures) from the memory box (history).
function handlePlay(nextSquares) {
    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];
    setHistory(nextHistory);
    setCurrentMove(nextHistory.length - 1);
  }
didn't understand
function jumpTo(nextMove) {
    setCurrentMove(nextMove);
  }
This function helps us to jump back to any move we want to by updating the currentmove state. 
const moves = history.map((squares, move) => {
    let description;
    if (move > 0) {
      description = 'Go to move #' + move;
    } else {
      description = 'Go to game start';
    }
    return (
      <li key={move}>
        <button onClick={() => jumpTo(move)}>{description}</button>
      </li>
    );
  });
history.map loops around all the saved board state to create button such that we can visit all our previous moves, here sqaures refers to the current board state and moves
refers the number of move till the current board state. so first we check if the move number is greater than 0 or not if yes then the jump button will be created with the 
description 'Go to move # +move number' for example move number is 3 then it will be 'Go to move #4' and if false which means 0 then 'Go to game start'
Now li keeps our elements in ordered list and key={move} helps react update list items. <button onClick={() => jumpTo(move)}>{description}</button> this means that when the
button is clicked it will jump to the "move" it will be on and give description like go to move #3, go to move #5 etc. 
  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{moves}</ol>
      </div>
    </div>
  );
}

